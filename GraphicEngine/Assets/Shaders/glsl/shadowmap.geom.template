#version 450 core

#extension GL_ARB_separate_shader_objects : enable

#define LIGHT_COUNT <<PLACEHOLDER_1>>
#define <<PLACEHOLDER_2>>
#define DEPTH <<PLACEHOLDER_3>>

layout (triangles, invocations = LIGHT_COUNT) in;
layout (triangle_strip, max_vertices = 3 * DEPTH) out;

layout (std140) uniform LightSpaceMatrixArray
{
    mat4 lightSpace[LIGHT_COUNT * DEPTH];
} lightSpaceMatrix;

#ifdef FRAG
layout (location = 0) in vec3 fragPos[];

layout (std140) uniform LightPositionFarPlaneArray
{
    vec4 lightPosFarPlane[LIGHT_COUNT];
} lightPositionFarPlane;

layout (location = 1) out float fragDepth;
#endif

void main()
{
    for (int face = 0; face < DEPTH; ++face)
    {
        gl_Layer = gl_InvocationID * DEPTH + face;
        for (int i = 0; i < 3; ++i)
        {
            gl_Position = lightSpaceMatrix.lightSpace[gl_Layer] * gl_in[i].gl_Position;
            #ifdef FRAG
            vec3 lightPosition = lightPositionFarPlane.lightPosFarPlane[gl_Layer].xyz;
            float farPlane = lightPositionFarPlane.lightPosFarPlane[gl_Layer].w;
            fragDepth = length(fragPos[i] - lightPosition) / farPlane;
            #endif
            EmitVertex();
        }
        EndPrimitive();
    }
}